package net.dtcc.lib;

public class AllInOne {
	
	// 	methods
	public double CalcRectangleArea(double l, double w) {
		return l * w;
		
	}// end rectangle method
	
	public double CalcSquareArea(double l) {
		return Math.pow(l, 2) ;
		
	}// end square method
	
	public double CalcTriangleArea(double b, double h) {
		return (b * h)/2 ;
		
	}// end Triangle method
	
	public double CalcCircleArea(double r) {
		return Math.PI * Math.pow(r, 2) ;
		
	}// end Circle method
	public double CalcTrapezoidArea(double a, double b, double h) {
		return ((a + b)/2) * h;
		
	}// end Trapezoid method
	
	public double ElCalcEllipseArealipse(double a, double b) {
		return Math.PI * a * b ;
		
	}// end Ellipse method
	
	public double areaOfPentagon(double a) {
		return (a * Math.pow(a, 2)) / (4 * Math.tan(Math.PI / a));
		
	}// end Pentagon method
	
	public double CalcParalleglogramArea(double b, double h) {
		return b * h;
		
	}// end Parallelogram method
	
	public double CalcRhombusArea(double p, double q) {
		return (p * q)/2;
		
	}// end Rhombus method
	
	public double CalcHexagonArea(double a) {
		return ((3 * Math.sqrt(3))/2) * Math.pow(a, 2);
		
	}// end Hexagon method
	
	// this is for a general Polygon assuming all sides are equal,  n = number of sides, a = first side length.
	public double CalcPolygonArea(double n, double a) {
		double angle = Math.toRadians(180/n);
	    angle = Math.tan(angle);
		return ((a * a * n)/(4*angle));
		
	}// end Polygon method.
	
	
	//Volume Methods
	public double CubeVolume(double edge) {
		return Math.pow(edge, 3);
		}
	public double BoxVolume(double length, double width, double height) {
		return length * width * height;
	}
	public double CylinderVolume(double radius, double height) {
		return Math.PI * Math.pow(radius, 2) * height;
	}
	public double ConeVolume(double radius, double height) {
		return Math.PI * Math.pow(radius, 2) * (height/3);
		
	}
	public double SphereVolume(double radius) {
		return ( 4.0 / 3.0 ) * Math.PI * Math.pow(radius , 3 );
		
	}
	
	
	
	
    // Perimeter methods
    public double perimeterOfSquare(double sideLength) {

        return 4 * sideLength;
    }

    public double perimeterOfRectangle(double length, double width) {

        return 2 * (length + width);
    }

    // Circumference methods
    public double circumferenceOfCircle(double radius) {

        return 2 * Math.PI * radius;
    }

    // Pythagorus theorem
    public double pythagorasTheorem(double a, double b) {
      
        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
    }
    
    
    //Temperature Methods
  	public double CelciusToFahren(double c) {
  		return (c * 9/5) + 32;
  	}
  	public double CelciusToKelvin(double c) {
  		return c + 273.15;
  	}
  	public double FahrenToCelcius(double f) {
  		return (f - 32) * 5/9;
  	}
  	public double FahrenToKelvin(double f) {
  		return (f - 32) * 5/9 + 273.15;
  	}
 // Binary methods
    public int binaryToDecimal(String binary) {
        // Implement binary to decimal conversion and return the result as an int
        int decimal = 0;
        int binaryLength = binary.length();
        for (int i = 0; i < binaryLength; i++) {
            if (binary.charAt(i) == '1') {
                decimal += Math.pow(2, binaryLength - 1 - i);
            }
        }
        return decimal;
    }
	
	
	
	// Fractions 
    public String FractionAddition(int numerator1, int denominator1, int numerator2, int denominator2) {
    	int x =  numerator1*denominator2 + numerator2*denominator1;
    	int comd = denominator1 * denominator2;
  
		return (x + "/" + comd);
		
		
		
	}
	
	public String FractionSubtraction(int numerator1, int denominator1, int numerator2, int denominator2) {
		int x =  numerator1*denominator2 - numerator2*denominator1;
    	int comd = denominator1 * denominator2;
  
		return (x + "/" + comd);
		
		
		
	}
	
	public String FractionMultiplication(int numerator1, int denominator1, int numerator2, int denominator2) {
		int finalNumerator = numerator1 * numerator2;
		int commonDenominator = denominator1 * denominator2;
		
		return (finalNumerator + "/" + commonDenominator);
	}
	
	public String FractionDivision(int numerator1, int denominator1, int numerator2, int denominator2) {
		int finalNumerator = numerator1 * denominator2;
		int finalDenominator = denominator1 * numerator2;
		return (finalNumerator + "/" + finalDenominator);
	}
	
	
	 
}
